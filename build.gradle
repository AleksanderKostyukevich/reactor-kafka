// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and

buildscript {
  repositories {
        maven { url "http://repo.spring.io/plugins-release" }
  }
  dependencies {
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11',
                  'org.springframework.build.gradle:propdeps-plugin:0.0.7',
                  'io.spring.gradle:spring-io-plugin:0.0.4.RELEASE'
  }
}
plugins {
  id 'org.asciidoctor.convert' version '1.5.3'
}

ext {
    gradleVersion = '3.1'
    gradleScriptDir = "${rootProject.projectDir}/gradle"

    defaultKafkaVersion = "0.10.1.0"
    def getKafkaVersion = project.hasProperty('kafkaVersion') ? project.property('kafkaVersion') : "${defaultKafkaVersion}"

    kafkaVersion = getKafkaVersion
    reactorVersion = '3.0.4.BUILD-SNAPSHOT'
    metricsVersion = '2.2.0'

    argparseVersion = '0.5.0'
    joptVersion = '4.9'

    slf4jVersion = '1.7.21'
    junitVersion = '4.12'
    zkVersion = "3.4.9"
    springKafkaVersion = '1.1.2.BUILD-SNAPSHOT'
    powermockVersion = '1.6.4'

    javadocLinks = ["http://docs.oracle.com/javase/8/docs/api/",
                    "https://kafka.apache.org/0101/javadoc",
                    "http://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/",
                    "http://projectreactor.io/core/docs/api/"] as String[]

}

apply from: "$gradleScriptDir/setup.gradle"
apply plugin: 'propdeps'

configurations.all {
  // check for snapshot updates every time
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

subprojects {
    group = 'io.projectreactor.kafka'

    repositories {
        mavenLocal()
        maven { url 'http://repo.spring.io/libs-release' }
        maven { url 'http://repo.spring.io/libs-snapshot' }
        maven { url 'https://repository.apache.org/content/groups/staging' }
        jcenter()
        mavenCentral()
    }
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'java'


    sourceCompatibility = targetCompatibility = 1.8

    eclipse.project.natures += 'org.springframework.ide.eclipse.core.springnature'

    [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all,-options']

    test {
        maxHeapSize = "1024m"
        testLogging {
          events "passed", "skipped", "failed"
          //showStandardStreams = true
          exceptionFormat = 'full'
        }
    }

    checkstyle {
        configFile = new File(rootDir, "checkstyle/checkstyle.xml")
        configProperties = [suppressionsXml: "$rootDir/checkstyle/suppressions.xml"]
    }
    test.dependsOn('checkstyleMain', 'checkstyleTest')

    task srcJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    artifacts {
        archives srcJar
    }

    dependencies {
        compile "org.apache.kafka:kafka-clients:$kafkaVersion"
        compile "io.projectreactor:reactor-core:$reactorVersion"

        testCompile "org.apache.kafka:kafka-clients:$kafkaVersion:test"
        testCompile "junit:junit:$junitVersion"

        testCompile "io.projectreactor.addons:reactor-test:$reactorVersion"
        testCompile "org.apache.zookeeper:zookeeper:$zkVersion"
        testCompile "org.springframework.kafka:spring-kafka-test:$springKafkaVersion"
        testCompile "org.powermock:powermock-module-junit4:$powermockVersion"
        testCompile "org.powermock:powermock-core:$powermockVersion"
        testCompile "org.powermock:powermock-api-mockito:$powermockVersion"
        testCompile "org.slf4j:slf4j-api:$slf4jVersion"
        testCompile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    }

}

project(':reactor-kafka-api') {
    archivesBaseName = 'reactor-kafka'
    description = 'Reactor Kafka: A reactive API for Apache Kafka'

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':reactor-kafka-tools') {
    description = 'Tools for Reactor Kafka'
    dependencies {
        compile project(':reactor-kafka-api')
        compile "com.yammer.metrics:metrics-core:$metricsVersion"
        compile "net.sf.jopt-simple:jopt-simple:$joptVersion"
        compile "net.sourceforge.argparse4j:argparse4j:$argparseVersion"

        testCompile project(':reactor-kafka-api').sourceSets.test.output
    }

    test {
        systemProperties System.properties
    }

    artifacts {
        archives sourcesJar
    }
}

project(':reactor-kafka-samples') {
    description = 'Samples for Reactor Kafka'
    dependencies {
        compile project(':reactor-kafka-api')
        compile "com.yammer.metrics:metrics-core:$metricsVersion"

        testCompile project(':reactor-kafka-api').sourceSets.test.output
    }

    task classpath << {
        println sourceSets.main.runtimeClasspath.asPath
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':reactor-kafka-docs') {
    description = 'Documentation for Reactor Kafka'
    apply plugin: 'org.asciidoctor.convert'

    task api(type: Javadoc) {
        dependsOn jar
        group = "Reactor Kafka Javadoc"

        description = "Generates aggregated Javadoc API documentation."
        title = "Reactor Kafka ${version}"

        if (JavaVersion.current().isJava8Compatible()) {
            compileTestJava.options.compilerArgs += "-parameters"
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }

        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = false
        options.header = "Reactor Kafka"
        options.overview = "src/api/overview.html"
        options.links(rootProject.ext.javadocLinks)

        maxMemory = "1024m"
        destinationDir = new File(buildDir, "api")
        source project(':reactor-kafka-api').sourceSets.main.allJava
        exclude "**/internals/**"
        doFirst {
            classpath = files(rootProject.subprojects.collect { it.sourceSets.main.compileClasspath })
        }
    }
    asciidoctor {
        sources {
            include "index.asciidoc"
        }
        outputDir file("$buildDir/asciidoc")
        backends = ['html5', 'pdf']
        logDocuments = true
        options = [
            doctype: 'book'
        ]
        attributes docinfo: '',
            toc2: '',
            'compat-mode': '',
            stylesdir: "stylesheets/",
            stylesheet: 'golo.css',
            appversion: "$version",
            'source-highlighter': 'prettify'

        doLast {
          file("$outputDir/pdf/index.pdf").
              renameTo("$outputDir/pdf/reactor-kafka-reference-guide-${version}.pdf")
        }
    }
}
